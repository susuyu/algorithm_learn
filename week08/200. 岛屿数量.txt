class Solution {
    int dx[4] = {0, 1, 0, -1};
    int dy[4] = {1, 0, -1, 0};
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    Dfs(grid, i, j);
                    ans++;
                }
            }
        }

        return ans;
    }

    void Dfs(vector<vector<char>>& grid, int x, int y)
    {
        grid[x][y] = '2';
        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];
            if (newX < 0 || newX >= grid.size() || newY < 0 || newY >= grid[0].size() || 
                grid[newX][newY] != '1' || grid[newX][newY] == '2') {
                continue;
            }

            Dfs(grid, newX, newY);
        }
    }
};