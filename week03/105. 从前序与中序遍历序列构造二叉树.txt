/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preLen = preorder.size();
        int inLen = inorder.size();
        unordered_map<int, int> inValToIndex;

        for (int i = 0; i < inLen; i++) {
            inValToIndex[inorder[i]] = i;
        }

        return Dfs(preorder, 0, preLen-1, inValToIndex, 0, inLen-1);
    }

    TreeNode* Dfs(vector<int>& preorder, int preBegin, int preEnd, 
        unordered_map<int, int>& inValToIndex, int inBegin, int inEnd)
    {
        if (preBegin > preEnd || inBegin > inEnd) {
            return nullptr;
        }

        int rootVal = preorder[preBegin];
        int inRootIndex = inValToIndex[rootVal];
        int leftLen = inRootIndex - inBegin;

        TreeNode* root = new TreeNode(rootVal);

        root->left = Dfs(preorder, preBegin+1, preBegin+leftLen, inValToIndex, inBegin, inRootIndex-1);
        root->right = Dfs(preorder, preBegin+leftLen+1, preEnd, inValToIndex, inRootIndex+1, inEnd);

        return root;
    }
};