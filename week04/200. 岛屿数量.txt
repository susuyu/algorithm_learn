class Solution {
    int dx[4] = {0, 1, 0, -1};
    int dy[4] = {1, 0, -1, 0};
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visit(m, vector<bool>(n, false));

        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !visit[i][j]) {
                    Dfs(grid, i, j, visit);
                    ans++;
                }
            }
        }

        return ans;
    }

    void Dfs(vector<vector<char>>& grid, int x, int y, vector<vector<bool>>& visit)
    {
        if (x < 0 || x >= grid.size() || y < 0 || y >= grid[0].size() || grid[x][y] == '0') {
            return;
        }

        if (visit[x][y]) {
            return;
        }

        visit[x][y] = true;

        for (int i = 0; i < 4; i++) {
            Dfs(grid, x + dx[i], y + dy[i], visit);
        }
    }
};